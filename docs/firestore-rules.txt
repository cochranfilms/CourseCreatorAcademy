rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
      
      // Saved items subcollection - users can only access their own saved items
      match /saved/{savedId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
      }
      
      // Progress tracking subcollection - users can only access their own progress
      match /progress/{progressId} {
        allow read, write: if isAuthenticated() && isOwner(userId);
        
        // Courses progress subcollection
        match /courses/{courseId} {
          allow read, write: if isAuthenticated() && isOwner(userId);
        }
      }
    }
    
    // Marketplace listings collection
    match /listings/{listingId} {
      // Anyone authenticated can read listings
      allow read: if isAuthenticated();
      
      // Only authenticated users can create listings
      // Creator ID must match the authenticated user
      allow create: if isAuthenticated() 
        && request.resource.data.creatorId == request.auth.uid
        && request.resource.data.keys().hasAll(['title', 'price', 'condition', 'creatorId', 'createdAt']);
      
      // Only the creator can update/delete their listing
      allow update: if isAuthenticated() 
        && resource.data.creatorId == request.auth.uid
        && request.resource.data.creatorId == request.auth.uid;
      
      allow delete: if isAuthenticated() && resource.data.creatorId == request.auth.uid;
    }
    
    // Opportunities collection
    match /opportunities/{opportunityId} {
      // Anyone authenticated can read opportunities
      allow read: if isAuthenticated();
      
      // Only authenticated users can create opportunities
      // Poster ID must match the authenticated user
      allow create: if isAuthenticated()
        && request.resource.data.posterId == request.auth.uid
        && request.resource.data.keys().hasAll(['title', 'company', 'location', 'type', 'posterId', 'posted']);
      
      // Only the poster can update/delete their opportunity
      allow update: if isAuthenticated()
        && resource.data.posterId == request.auth.uid
        && request.resource.data.posterId == request.auth.uid;
      
      allow delete: if isAuthenticated() && resource.data.posterId == request.auth.uid;
    }
    
    // Projects collection
    match /projects/{projectId} {
      // Anyone authenticated can read projects
      allow read: if isAuthenticated();
      
      // Only authenticated users can create projects
      // Creator ID must match the authenticated user
      allow create: if isAuthenticated()
        && request.resource.data.creatorId == request.auth.uid;
      
      // Only the creator can update/delete their project
      allow update: if isAuthenticated()
        && resource.data.creatorId == request.auth.uid;
      
      allow delete: if isAuthenticated() && resource.data.creatorId == request.auth.uid;
    }
    
    // Threads collection (for messaging)
    match /threads/{threadId} {
      // Users can read threads they are members of
      allow read: if isAuthenticated() && request.auth.uid in resource.data.members;
      
      // Users can create threads they are members of
      allow create: if isAuthenticated() 
        && request.auth.uid in request.resource.data.members;
      
      // Users can update threads they are members of
      allow update: if isAuthenticated() 
        && request.auth.uid in resource.data.members;
      
      // Users can delete threads they are members of (optional - you may want to restrict this)
      allow delete: if isAuthenticated() && request.auth.uid in resource.data.members;
      
      // Messages subcollection
      match /messages/{messageId} {
        // Users can read messages in threads they are members of
        allow read: if isAuthenticated() 
          && request.auth.uid in get(/databases/$(database)/documents/threads/$(threadId)).data.members;
        
        // Users can create messages in threads they are members of
        allow create: if isAuthenticated() 
          && request.auth.uid == request.resource.data.senderId
          && request.auth.uid in get(/databases/$(database)/documents/threads/$(threadId)).data.members;
        
        // Users can update messages they sent (for read receipts, etc.)
        allow update: if isAuthenticated() 
          && request.auth.uid in get(/databases/$(database)/documents/threads/$(threadId)).data.members;
        
        // Users can delete their own messages
        allow delete: if isAuthenticated() 
          && resource.data.senderId == request.auth.uid;
      }
    }
    
    // Courses (public catalog metadata; writes restricted)
    match /courses/{courseId} {
      // anyone can read course info
      allow read: if true;

      // only authenticated users can create courses
      allow create: if isAuthenticated();

      // only the course creator can update/delete the course
      allow update, delete: if isAuthenticated()
        && resource.data.creatorId == request.auth.uid;

      // Modules under a course
      match /modules/{moduleId} {
        // public can read module titles/order
        allow read: if true;

        // writes allowed only if caller is the course creator
        allow create, update, delete: if isAuthenticated()
          && get(/databases/$(database)/documents/courses/$(courseId)).data.creatorId == request.auth.uid;

        // Lessons under a module
        match /lessons/{lessonId} {
          // public can read lesson titles/order/duration
          allow read: if true;

          // writes allowed only if caller is the course creator
          allow create, update, delete: if isAuthenticated()
            && get(/databases/$(database)/documents/courses/$(courseId)).data.creatorId == request.auth.uid;
        }
      }
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
