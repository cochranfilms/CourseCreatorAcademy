rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if isAuthenticated() && isOwner(userId);
    }
    
    // Marketplace listings collection
    match /listings/{listingId} {
      // Anyone authenticated can read listings
      allow read: if isAuthenticated();
      
      // Only authenticated users can create listings
      // Creator ID must match the authenticated user
      allow create: if isAuthenticated() 
        && request.resource.data.creatorId == request.auth.uid
        && request.resource.data.keys().hasAll(['title', 'price', 'condition', 'creatorId', 'createdAt']);
      
      // Only the creator can update/delete their listing
      allow update: if isAuthenticated() 
        && resource.data.creatorId == request.auth.uid
        && request.resource.data.creatorId == request.auth.uid;
      
      allow delete: if isAuthenticated() && resource.data.creatorId == request.auth.uid;
    }
    
    // Opportunities collection
    match /opportunities/{opportunityId} {
      // Anyone authenticated can read opportunities
      allow read: if isAuthenticated();
      
      // Only authenticated users can create opportunities
      // Poster ID must match the authenticated user
      allow create: if isAuthenticated()
        && request.resource.data.posterId == request.auth.uid
        && request.resource.data.keys().hasAll(['title', 'company', 'location', 'type', 'posterId', 'posted']);
      
      // Only the poster can update/delete their opportunity
      allow update: if isAuthenticated()
        && resource.data.posterId == request.auth.uid
        && request.resource.data.posterId == request.auth.uid;
      
      allow delete: if isAuthenticated() && resource.data.posterId == request.auth.uid;
    }
    
    // Courses collection (for future use)
    match /courses/{courseId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.creatorId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.creatorId == request.auth.uid;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

